spring:
  # AWS 설정
  cloud:
    aws:
      region:
        static: ap-northeast-2
      credentials:
        use-default-aws-credentials-chain: true

  # JPA 설정
  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  # 데이터소스 설정
  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  # JWT 설정
  jwt:
    secret: ${JWT_SECRET}

  # 보안 설정
  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            authorization-grant-type: authorization_code
            redirect-uri: "https://app.podopicker.store/login/oauth2/code/google"
            token-uri: https://oauth2.googleapis.com/token
            user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
            user-name-attribute: sub
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            scope:
              - account_email
              - profile_nickname
            authorization-grant-type: authorization_code
            redirect-uri: "https://app.podopicker.store/login/oauth2/code/kakao"
            client-name: Kakao
            client-authentication-method: client_secret_post
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
            provider: kakao # 이 부분을 추가하여 provider 설정

          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
            authorization-grant-type: authorization_code
            redirect-uri: "https://app.podopicker.store/login/oauth2/code/naver"
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

      # 제공자별 URL 설정
      provider:
        google:
          authorization-uri: https://accounts.google.com/o/oauth2/v2/auth
          token-uri: https://oauth2.googleapis.com/token
          user-info-uri: https://www.googleapis.com/oauth2/v3/userinfo
          user-name-attribute: sub
        kakao:
          authorization-uri: https://kauth.kakao.com/oauth/authorize
          token-uri: https://kauth.kakao.com/oauth/token
          user-info-uri: https://kapi.kakao.com/v2/user/me
          user-name-attribute: id
        naver:
          authorization-uri: https://nid.naver.com/oauth2.0/authorize
          token-uri: https://nid.naver.com/oauth2.0/token
          user-info-uri: https://openapi.naver.com/v1/nid/me
          user-name-attribute: response

  # 기타 설정
  thymeleaf:
    enabled: false

  mvc:
    view:
      prefix: ""
      suffix: ""

  web:
    resources:
      add-mappings: true
      static-locations: classpath:/static/

  # Redis 설정
  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379

  # Kafka 설정
  kafka:
    enabled: false
    bootstrap-servers: ${KAFKA_SERVER}
    consumer:
      group-id: ticketing-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    properties:
      security.protocol: SASL_SSL
      sasl.mechanism: SCRAM-SHA-512
      sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USERNAME}" password="${KAFKA_PASSWORD}";

  # 메일 설정
  mail:
    host: ${MAIL_HOST}
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          name: ${MAIL_NAME}
          auth: true
          starttls:
            enable: true

  # Redis 클러스터 설정
  redis:
    cluster:
      nodes:
        - redis-0.redis.redis-cluster.svc.cluster.local:6379
        - redis-1.redis.redis-cluster.svc.cluster.local:6379
        - redis-2.redis.redis-cluster.svc.cluster.local:6379
        - redis-3.redis.redis-cluster.svc.cluster.local:6379
        - redis-4.redis.redis-cluster.svc.cluster.local:6379
        - redis-5.redis.redis-cluster.svc.cluster.local:6379

  # Recaptcha 설정
  recaptcha:
    secret: ${RECAPTCHA_SECRET}

  # CoolSMS 설정
  coolsms:
    api:
      key: ${COOLSMS_KEY}
      secret: ${COOLSMS_SECRET}

  # Petharmony 설정
  petharmony:
    phone:
      number: ${PETHARMONY}

  # Iamport 설정
  iamport:
    api-key: ${IAMPORT-API-KEY}
    api-secret: ${IAMPORT-API-SECRET}

  # Prometheus 설정
  management:
    endpoints:
      web:
        exposure:
          include: health,info,prometheus
    prometheus:
      metrics:
        export:
          enabled: true

  # 서버 설정
  server:
    port: 8080

  # 로그 설정
  logging:
    level:
      org.springframework.security: DEBUG
      org.springframework.security.oauth2: DEBUG
      org.springframework.web: DEBUG
    pattern:
      console: '{"timestamp":"%d{yyyy-MM-dd HH:mm:ss}","level":"%p","thread":"%t","logger":"%c","message":"%m"}'
