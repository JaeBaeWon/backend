spring:
  # config:
  # import: aws-secretsmanager:secret/backend
  cloud:
    aws:
      region:
        static: ap-northeast-2
      credentials:
        use-default-aws-credentials-chain: true

  jpa:
    hibernate:
      ddl-auto: update
    show-sql: true
    properties:
      hibernate:
        format_sql: true

  datasource:
    driver-class-name: com.mysql.cj.jdbc.Driver
    url: ${DB_URL}
    username: ${DB_USERNAME}
    password: ${DB_PASSWORD}

  jwt:
    secret: ${JWT_SECRET}

  security:
    oauth2:
      client:
        registration:
          google:
            client-id: ${GOOGLE_CLIENT_ID}
            client-secret: ${GOOGLE_CLIENT_SECRET}
            scope:
              - email
              - profile
            redirect-uri: ${GOOGLE_REDIRECT_URI}
          kakao:
            client-id: ${KAKAO_CLIENT_ID}
            client-secret: ${KAKAO_CLIENT_SECRET}
            scope:
              - account_email
              - profile_nickname
            authorization-grant-type: authorization_code
            redirect-uri: ${KAKAO_REDIRECT_URI}
            client-name: Kakao
            client-authentication-method: client_secret_post
          naver:
            client-id: ${NAVER_CLIENT_ID}
            client-secret: ${NAVER_CLIENT_SECRET}
            scope:
              - name
              - email
            client-name: Naver
            authorization-grant-type: authorization_code
            redirect-uri: ${NAVER_REDIRECT_URI}

        provider:
          kakao:
            authorization-uri: https://kauth.kakao.com/oauth/authorize
            token-uri: https://kauth.kakao.com/oauth/token
            user-info-uri: https://kapi.kakao.com/v2/user/me
            user-name-attribute: id
          naver:
            authorization-uri: https://nid.naver.com/oauth2.0/authorize
            token-uri: https://nid.naver.com/oauth2.0/token
            user-info-uri: https://openapi.naver.com/v1/nid/me
            user-name-attribute: response

  thymeleaf:
    enabled: false

  mvc:
    view:
      prefix: ""
      suffix: ""

  web:
    resources:
      add-mappings: true
      static-locations: classpath:/static/

  data:
    redis:
      host: ${REDIS_HOST}
      port: 6379

  kafka:
    # kafka 쓸때만 true로
    enabled: true
    bootstrap-servers: ${KAFKA_SERVER}
    consumer:
      group-id: ticketing-consumer-group
      auto-offset-reset: earliest
      key-deserializer: org.apache.kafka.common.serialization.StringDeserializer
      value-deserializer: org.apache.kafka.common.serialization.StringDeserializer
    producer:
      key-serializer: org.apache.kafka.common.serialization.StringSerializer
      value-serializer: org.apache.kafka.common.serialization.StringSerializer
    properties:
      security.protocol: SASL_SSL
      sasl.mechanism: SCRAM-SHA-512
      sasl.jaas.config: org.apache.kafka.common.security.scram.ScramLoginModule required username="${KAFKA_USERNAME}" password="${KAFKA_PASSWORD}";

  mail:
    host: ${MAIL_HOST}
    port: 587
    username: ${MAIL_USERNAME}
    password: ${MAIL_PASSWORD}
    properties:
      mail:
        smtp:
          name: ${MAIL_NAME}
          auth: true
          starttls:
            enable: true

redis:
  cluster:
    nodes:
      - redis-0.redis.redis-cluster.svc.cluster.local:6379
      - redis-1.redis.redis-cluster.svc.cluster.local:6379
      - redis-2.redis.redis-cluster.svc.cluster.local:6379
      - redis-3.redis.redis-cluster.svc.cluster.local:6379
      - redis-4.redis.redis-cluster.svc.cluster.local:6379
      - redis-5.redis.redis-cluster.svc.cluster.local:6379

recaptcha:
  secret: ${RECAPTCHA_SECRET}

coolsms:
  api:
    key: ${COOLSMS_KEY}
    secret: ${COOLSMS_SECRET}

petharmony:
  phone:
    number: ${PETHARMONY}

iamport:
  api-key: ${IAMPORT-API-KEY}
  api-secret: ${IAMPORT-API-SECRET}

management:
  endpoints:
    web:
      exposure:
        include: "prometheus"
  endpoint:
    prometheus:
      enabled: true
  prometheus:
    metrics:
      export:
        enabled: true

server:
  port: 8080

logging:
  level:
    root: INFO
  pattern:
    console: '{"timestamp":"%d{yyyy-MM-dd HH:mm:ss}","level":"%p","thread":"%t","logger":"%c","message":"%m"}'
